<?php
$_products = $this->getProducts();
?>
<div class="content-header">
    <h3>
        <?php if (count($_products)): ?>
            <button id="btn-pause" type="button" title="<?=$this->__('Pause')?>">
                <span><span><span id="btn-pause-label"><?=$this->__('Pause')?></span></span></span>
            </button>
        <?php endif; ?>
    </h3>
</div>

<?php if (!count($_products)): ?>
    <h4><?=$this->__('No products found')?></h4>
<?php else: ?>
    <h4 id="generate-progress" style="display: none;"><?=$this->__('%s of %s', '<span id="generate-offset"></span>', '<span id="generate-count"></span>')?></h4>
    <div id="calls" style="max-height: 400px; border: 1px solid #d6d6d6; background: #fafafa; padding: 10px 15px 5px; overflow: scroll;"></div>
    <script type="text/javascript">
    //<![CDATA[
        document.observe('dom:loaded', function () {
            $('loading-mask').remove();
        });
		window.performance = window.performance || {};
		performance.now = (function() {
			return performance.now       ||
				performance.mozNow    ||
				performance.msNow     ||
				performance.oNow      ||
				performance.webkitNow ||            
				Date.now  /*none found - fallback to browser default */
		})();
        var run = true;
        var generateUrl = '<?=$this->getGenerateUrl()?>';
        var products = '<?=$this->helper('core')->jsonEncode($_products)?>'.evalJSON();
        var interval = null;
        var start = 0;
        var end = 0;

        if ($('btn-pause')) {
            $('btn-pause').observe('click', function(e) {
                run = !run;
                var label = run ?
                    '<?=$this->__('Pause')?>' :
                    '<?=$this->__('Resume')?>';
                $('btn-pause-label').innerHTML = label;
                $('btn-pause').title = label;
            });
        }

        function processUrl(i) {
            if (!run) {
                setTimeout(function() {
                    processUrl(i);
                }, 50);
            } else if (products[i] && products[i].length) {
                $('generate-progress').show();
                $('generate-offset').innerHTML = i + 1;
                $('generate-count').innerHTML = products.length;
				//note the type needs to be a var when abstracted later
				var start= performance.now();
                new Ajax.Request(generateUrl + '?json=true&type=missassignments&id=' + products[i] , {
                    onCreate: function() {
                        start = new Date().getTime();
                        $('calls').insert({
                            top: '<p id="generate-' + i + '">Checked id::'+products[i]+'&nbsp;</p>'
                        });
                        interval = setInterval(function() {
                            $('generate-' + i).insert({ bottom: '.' });
                        }, 100);
                    },
                    onSuccess: function(response) {
                        var result = response.responseJSON;
						var message="";
						var took = (Math.round(result.total_time * 10000) / 10000).toFixed(4);
						var end=performance.now();
						var ttook = ( (start-end)/1000 );
						
                        if (result.error && result.error !="") {
							message = '<strong style="color:red;"> ' + result.error + '' + result.http_code + '</strong> <em>(server:' + took + 's | total:' + ttook + 's)</em>';
                        } else {
                            var color = result.http_code == 200 ? 'green' : 'red';
							message = '<strong style="color:'+ color +';"> ' + result.http_code + '</strong> <em>(server:' + took + 's | total:' + ttook + 's)</em>';	
                        }
						$('generate-' + i).insert({
                            bottom: message
                        });
						
						
                    },
                    onFailure: function() {
                        $('generate-' + i).insert({
                            bottom: '<strong style="color: red;">&nbsp;<?=$this->__('ERROR')?></strong>'
                        });
                    },
                    onComplete: function() {
                        clearInterval(interval);
                        setTimeout(function() {
                            processUrl(++i);
                        }, 50);
                    }
                });
            }
        }

        processUrl(0);
    //]]>
    </script>
<?php endif; ?>